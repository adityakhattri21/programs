#include<stdio.h>
#include<stdlib.h>
struct node{
    int data;
    struct node *right,*left;
};

void inorder(struct node *root){
    if(root!=NULL){
        inorder(root->left);
        printf("%d\t",root->data);
        inorder(root->right);
    }
    
}
void preorder(struct node*root){
    if(root!=NULL){
        printf("%d\t",root->data);
        preorder(root->left);
        preorder(root->right);
    }
    
}
void postorder(struct node*root){
    if(root!=NULL){
        postorder(root->left);
        postorder(root->right);
        printf("%d\t",root->data);
    }
    
}

struct node*createBst(struct node*root,int element){
    if(root==NULL){
        root=(struct node*)malloc(sizeof(struct node));
        root->data=element;
        root->left=root->right=NULL;
        return root;
    }
    else{
        if(element<root->data){
            root->left=createBst(root->left,element);
        }
        else if(element>root->data){
            root->right=createBst(root->right,element);
        }
        else{
            printf("Duplicate element.\n");
        }
        return root;
    }
    
}

int main(){
    struct node*root = NULL;
    int option,elem,n;
    while(1){
        printf("\n1.Creation of BST\n2.Inorder\n3.Postorder\n4.Preorder\n5.Exit\n");
        printf("Enter option ");
        scanf("%d",&option);
        switch(option){
            case 1: printf("Enter how many nodes you want to enter: ");
                    scanf("%d",&n);
                    for(int i=1;i<=n;i++){
                        printf("Enter the data for node %d: ",i);
                        scanf("%d",&elem);
                        root=createBst(root,elem);
                    }
                    break;
            case 2: inorder(root);break;
            case 3: postorder(root);break;
            case 4: preorder(root);break;
            case 5: exit(0);
        }
    }
}
